import * as builder from 'xmlbuilder';
import {XMLPropertyBuilder} from './XMLPropertyBuilder';

export function soundpointIPConverter(config: any, user?: string, password?: string) : string {
    let xml = builder.create({
        polycomConfig: new XMLPropertyBuilder()
            .tryAddProperty('@xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')
            .tryAddProperty('@xsi:noNamespaceSchemaLocation', 'polycomConfig.xsd')
            .tryAddProperty('@device.prov.password', password)
            .tryAddProperty('@device.prov.serverType', process.env.SERVER_TYPE)
            .tryAddProperty('@device.prov.serverName', process.env.SERVER_NAME)
            .tryAddBoolean('@device.prov.tagSerialNo', config.tagSerialNo)
            .tryAddProperty('@device.prov.user', user)
            .tryAddBoolean('@device.prov.ztpEnabled', config.ztpEnabled)
            .tryAddBoolean('@device.prov.password.set', password !== undefined)
            .tryAddBoolean('@device.prov.serverType.set', process.env.SERVER_TYPE !== undefined)
            .tryAddBoolean('@device.prov.serverName.set', process.env.SERVER_NAME !== undefined)
            .tryAddBoolean('@device.prov.tagSerialNo.set', config.tagSerialNo !== undefined)
            .tryAddBoolean('@device.prov.user.set', user !== undefined)
            .tryAddBoolean('@device.prov.ztpEnabled.set', config.ztpEnabled !== undefined)
            .tryAddBoolean('@device.set', true)//
            .tryAddProperty('@tcpIpApp.sntp.address', config.sntpAddress)
            .tryAddProperty('@tcpIpApp.sntp.gmtOffset', config.sntpGmtOffset)
            .tryAddProperty('@tcpIpApp.sntp.resyncPeriod', config.sntpResyncPeriod)
            .tryAddProperty('@dialplan.digitmap', config.digitMap)
            .tryAddBoolean('@feature.presence.enabled', config.presence)
            .tryAddBoolean('@feature.messaging.enabled', config.messaging)
            .tryAddBoolean('@feature.urlDialing.enabled', config.urlDialing)
            .tryAddRank('@voice.codecPref.G711_A', config.codecPref, 'G711_A')
            .tryAddRank('@voice.codecPref.G711_Mu', config.codecPref, 'G711_Mu')
            .tryAddRank('@voice.codecPref.G722', config.codecPref, 'G722')
            .tryAddRank('@voice.codecPref.G7221.32kbps', config.codecPref, 'G7221.32kbps')
            .tryAddRank('@voice.codecPref.G7221_C.48kbps', config.codecPref, 'G7221_C.48kbps')
            .tryAddRank('@voice.codecPref.G729_AB', config.codecPref, 'G729_AB')
            .tryAddRank('@voice.codecPref.Siren14.48kbps', config.codecPref, 'Siren14.48kbps')
            .tryAddRank('@voice.codecPref.Siren22.64kbps', config.codecPref, 'Siren22.64kbps')
            .tryAddBoolean('@voice.vadEnable', config.vadEnable)
            .tryAddBoolean('@voice.vad.signalAnnexB', config.vadSignalAnnexB)
            .tryAddProperty('@voice.vadThresh', config.vadThresh)
            .tryAddBoolean('@voice.volume.persist.handset', config.volumePersistHandset)
            .tryAddBoolean('@voice.volume.persist.headset', config.volumePersistHeadset)
            .tryAddBoolean('@voice.volume.persist.handsfree', config.volumePersistHandsFree)
            .tryAddProperty('@msg.mwi.1.callBackMode', config.mwi1_callBackMode)
            .tryAddProperty('@msg.mwi.1.callBack', config.mwi1_callBack)
            .tryAddProperty('@msg.mwi.2.callBackMode', config.mwi2_callBackMode)
            .tryAddProperty('@msg.mwi.2.callBack', config.mwi2_callBack)
            .tryAddProperty('@msg.mwi.3.callBackMode', config.mwi3_callBackMode)
            .tryAddProperty('@msg.mwi.3.callBack', config.mwi3_callBack)
            .tryAddProperty('@msg.mwi.4.callBackMode', config.mwi4_callBackMode)
            .tryAddProperty('@msg.mwi.4.callBack', config.mwi4_callBack)
            .tryAddProperty('@msg.mwi.5.callBackMode', config.mwi5_callBackMode)
            .tryAddProperty('@msg.mwi.5.callBack', config.mwi5_callBack)
            .tryAddProperty('@msg.mwi.6.callBackMode', config.mwi6_callBackMode)
            .tryAddProperty('@msg.mwi.6.callBack', config.mwi6_callBack)
            .tryAddBoolean('@msg.bypassInstantMessage', config.bypassInstantMessage)
            .tryAddBoolean('@up.oneTouchVoiceMail', config.oneTouchVoiceMail)
            .tryAddBoolean('@call.callWaiting.enable', config.callWaiting)
            .tryAddBoolean('@call.urlModeDialing', config.urlModeDialing)
            .tryAddBoolean('@prov.polling.enabled', config.pollingEnabled)
            .tryAddProperty('@prov.polling.mode', config.pollingMode)
            .tryAddProperty('@prov.polling.period', config.pollingPeriod)
            .tryAddProperty('@prov.polling.time', config.pollingTime)
            .tryAddProperty('@prov.polling.timeRandomEnd', config.pollingTimeRandomEnd)
            .tryAddProperty('reg', new XMLPropertyBuilder()
                .tryAddPropertiesFlatTree((i:number) => `@reg.${i}.server.1.address`, (i:number) => config[`reg${i}Address`], 1, 34)
                .tryAddPropertiesFlatTree((i:number) => `@reg.${i}.server.1.transport`, (i:number) => config[`reg${i}Transport`], 1, 34)
                .tryAddPropertiesFlatTree((i:number) => `@reg.${i}.server.1.port`, (i:number) => config[`reg${i}Port`], 1, 34)
                .tryAddPropertiesFlatTree((i:number) => `@reg.${i}.server.1.expires`, (i:number) => config[`reg${i}Expires`], 1, 34)
                .tryAddPropertiesFlatTree((i:number) => `@reg.${i}.server.1.expires.overlap`, (i:number) => config[`reg${i}Overlap`], 1, 34)
                .val()
            )
            .val()
    }, {version: '1.0', encoding: 'UTF-8', standalone: true});

    return xml.end();
}